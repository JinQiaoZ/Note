(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{294:function(t,s,r){"use strict";r.r(s);var a=r(0),_=Object(a.a)({},(function(){var t=this,s=t.$createElement,r=t._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"数据库的acid"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数据库的acid"}},[t._v("#")]),t._v(" 数据库的ACID")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://img13.360buyimg.com/img/jfs/t28492/205/667054040/339020/26ffb450/5bfaacb5N7019206d.jpg",alt:"图片"}})]),t._v(" "),r("p",[t._v("ACID是指在可靠数据库管理系统(DBMS)中，"),r("strong",[t._v("事务(Transaction)"),r("strong",[t._v("所应该具有的")]),t._v("四个特性")])]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("原子性(Atomicity)")])]),t._v(" "),r("li",[r("strong",[t._v("一致性(Consistency)")])]),t._v(" "),r("li",[r("strong",[t._v("隔离性(Isolation)")])]),t._v(" "),r("li",[r("strong",[t._v("持久性(Durability)")])])]),t._v(" "),r("p",[t._v("这是可靠数据库所应具备的几个特性，这些特性保证了数据库事物的可靠")]),t._v(" "),r("p",[t._v("在数据库中，"),r("strong",[t._v("对数据的一系列操作在逻辑上可以看成一个整体的操作")]),t._v("，这个整体的操作就叫"),r("strong",[t._v("事物")])]),t._v(" "),r("h2",{attrs:{id:"原子性-atomicity"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原子性-atomicity"}},[t._v("#")]),t._v(" 原子性(Atomicity)")]),t._v(" "),r("p",[t._v("原子性是指事务是一个不可再分割的工作单位，要求每个事物中的所有操作"),r("strong",[t._v("要么全部完成，要么就像全部没有发生一样")])]),t._v(" "),r("p",[t._v("如果事物中的部分操作失败了，则整个事物事物失败了，结果就是数据库中的状态保持没变。原子性系统必须保证在各种情况下的原子性，包括主机断电、主机发生了错误、主机奔溃。对外界来说，一个提交了的事物看起来(通过事物对数据库产生的影响)是不可分的，一个失败了的事物，对外界来说就好像什么都没有发生过一样")]),t._v(" "),r("h2",{attrs:{id:"一致性-consistency"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一致性-consistency"}},[t._v("#")]),t._v(" 一致性(Consistency)")]),t._v(" "),r("p",[r("strong",[t._v("一致性是指在事务开始之前和事务结束以后，数据库的完整性约束没有被破坏")]),t._v("。这是说数据库事务不能破坏关系数据的完整性以及业务逻辑上的一致性")]),t._v(" "),r("p",[t._v("一致性确保了任何事物都会使数据库从一种合法的状态变为另一种合法的状态。通过定义的各种规则，包括约束(Constraints)、级联(Cascades)、触发器(Triggers)以及它们的组合来保证写入数据库的所有数据都必须是合法的。一致性并不能保证事物(程序)的正确性，换句话说事物的一致性并不一定如程序员所期望的那样(这应该是由应用层代码来负责的)，它只能保证数据库中的所有数据都不会违反定义好的规则，不管程序有没有发生错误甚至是发生了任何错误都不会违反定义好的规则")]),t._v(" "),r("h2",{attrs:{id:"隔离性-isolation"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#隔离性-isolation"}},[t._v("#")]),t._v(" 隔离性(Isolation)")]),t._v(" "),r("p",[r("strong",[t._v("隔离性保证了并发执行多个事物对系统的状态的影响和串行化执行多个事物对系统的状态的影响是一样的")])]),t._v(" "),r("p",[t._v("多个事务并发访问时，事务之间是隔离的，一个事务不应该影响其它事务运行效果")]),t._v(" "),r("p",[t._v("这指的是在并发环境中，当不同的事务同时操纵相同的数据时，每个事务都有各自的完整数据空间。由并发事务所做的修改必须与任何其他并发事务所做的修改隔离。事务查看数据更新时，数据所处的状态要么是另一事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看到中间状态的数据")]),t._v(" "),r("p",[r("strong",[t._v("数据库管理系统采用锁机制来实现事务的隔离性")]),t._v("。当多个事务同时更新数据库中相同的数据时，只允许持有锁的事务能更新该数据，其他事务必须等待，直到前一个事务释放了锁，其他事务才有机会更新该数据")]),t._v(" "),r("h2",{attrs:{id:"持久性-durability"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#持久性-durability"}},[t._v("#")]),t._v(" 持久性(Durability)")]),t._v(" "),r("p",[t._v("持久性，意味着在事务完成以后，该事务所对数据库所作的更改便持久的保存在数据库之中，并不会被回滚")]),t._v(" "),r("p",[r("strong",[t._v("即使出现了任何事故比如断电(甚至事物刚被提交数据库系统就发生了奔溃)等，事务一旦提交，则持久化保存在数据库中")])]),t._v(" "),r("h4",{attrs:{id:"最后"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#最后"}},[t._v("#")]),t._v(" 最后")]),t._v(" "),r("p",[r("strong",[t._v("好多数据库依赖锁来实现ACID能力")]),t._v("。锁意味着事物在其需要访问的数据上打个标记，这样一来数据库管理系统就会知道这些数据在该事物完成(事物成功或失败)之前不允许其他事物修改这些被打了标记的数据。锁在数据被处理之前必须获取到，也包括处理那些只会被读取但不会被修改的数据之前也要获取锁。非平常事物通常需要大量锁，导致了不小的性能开销同时也阻塞了其他事物。例如，"),r("strong",[t._v("用户A正在执行一个事物，需要读取某一行数据而这时另外一个用户B正在修改这一行数据。用户B必须等到用户A的事物彻底完成")]),t._v("。通常可以通过两个阶段锁来保证全隔离性")]),t._v(" "),r("ol",[r("li",[t._v("感谢敦格的谈谈数据库的ACID: "),r("a",{attrs:{href:"https://blog.csdn.net/shuaihj/article/details/14163713",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://blog.csdn.net/shuaihj/article/details/14163713"),r("OutboundLink")],1)]),t._v(" "),r("li",[t._v("感谢一中晴哥威武的数据库的ACID属性: "),r("a",{attrs:{href:"https://www.cnblogs.com/liuqing576598117/p/9564916.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.cnblogs.com/liuqing576598117/p/9564916.html"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=_.exports}}]);