(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{306:function(t,a,s){"use strict";s.r(a);var e=s(0),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"dubbo简单的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dubbo简单的使用"}},[t._v("#")]),t._v(" Dubbo简单的使用")]),t._v(" "),s("p",[t._v("一个简单的入门 Demo，这里我采用 SpringBoot 的全注解方式，感觉 XML 的方式更麻烦一点")]),t._v(" "),s("p",[s("strong",[t._v("代码地址")])]),t._v(" "),s("ul",[s("li",[t._v("Github: "),s("a",{attrs:{href:""}})]),t._v(" "),s("li",[t._v("Gitee(码云): "),s("a",{attrs:{href:""}})])]),t._v(" "),s("h2",{attrs:{id:"_1-前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-前言"}},[t._v("#")]),t._v(" 1. 前言")]),t._v(" "),s("p",[t._v("一般现在用于生产环境的 Dubbo 注册中心都是 ZooKeeper，那我们首先启动 ZooKeeper，安装可以查看: "),s("router-link",{attrs:{to:"/dubbo/00-ZooKeeper-Use.html"}},[t._v("ZooKeeper安装使用")])],1),t._v(" "),s("h2",{attrs:{id:"_2-项目创建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-项目创建"}},[t._v("#")]),t._v(" 2. 项目创建")]),t._v(" "),s("p",[t._v("我们先创建一个父工程")]),t._v(" "),s("h3",{attrs:{id:"_2-1-父工程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-父工程"}},[t._v("#")]),t._v(" 2.1. 父工程")]),t._v(" "),s("p",[t._v("打开 IDEA，File-New-Project...，选择 Maven 点击下一步 Next")]),t._v(" "),s("p",[t._v("groupId 我们填写我们的包名 com.demo，artifactId 填写我们的项目名 01-Dubbo-SpringBoot，version 先默认，点击下一步 Next")]),t._v(" "),s("p",[t._v("位置存在在 E:\\XUE\\ProjectStudy\\Dubbo\\01-Dubbo-SpringBoot，点击完成 Finish")]),t._v(" "),s("p",[t._v("创建完成，打开，可以把除 pom.xml 的其他文件都删除了，再新建一个 .gitignore 的 Git 忽略文件，IDEA 生成的文件删除了还是会生成，所以就不用删了")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wliduo/CDN@master/2019/12/20191213001.png",alt:"图片"}})]),t._v(" "),s("p",[t._v("修改 pom.xml 的版本属性，写一个统一的版本号，子工程统一使用")]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("${revision}"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("properties")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("revision")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("1.0-SNAPSHOT"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("revision")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("properties")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("h3",{attrs:{id:"_2-2-api工程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-api工程"}},[t._v("#")]),t._v(" 2.2. API工程")]),t._v(" "),s("p",[t._v("这个主要是存放接口的，抽取出来，方便服务提供者和消费者直接使用，不需要两边建立重复的接口文件")]),t._v(" "),s("p",[t._v("我们在父工程下点击 File-New-Module，还想选择 Maven，点击下一步 Next，填写模块名 artifactId 为 common-api，点击下一步 Next，修改名称为 common-api，点击完成 Finish 即可")]),t._v(" "),s("p",[t._v("修改 common-api 工程 pom.xml 版本号 version 为 ${revision}")])])}),[],!1,null,null,null);a.default=r.exports}}]);