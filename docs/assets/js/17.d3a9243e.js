(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{286:function(t,e,a){"use strict";a.r(e);var v=a(0),n=Object(v.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"事务隔离级别-isolation-level"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务隔离级别-isolation-level"}},[t._v("#")]),t._v(" 事务隔离级别(Isolation Level)")]),t._v(" "),a("p",[t._v("隔离级别与并发性是互为矛盾的")]),t._v(" "),a("p",[a("strong",[t._v("隔离程度越高，数据库的并发性越差；隔离程度越低，数据库的并发性越好")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("隔离级别")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Read Uncommitted(未提交读)")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Read Committed(提交读)")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Repeatable Read(可重复读)")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Serializable(可串行化)")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("脏读(Dirty Read)")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Y")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("更新丢失(Lost Update)")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Y")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Y")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("不可重复读(NonRepeatable Read)")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Y")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Y")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("幻读(Phantom Read)")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Y")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Y")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Y")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("默认级别数据库")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Oracle，SQL Server")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("MySQL(InnoDB)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("-")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("并发性能")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("最高")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("第二")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("第三")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("最低")])])])]),t._v(" "),a("h2",{attrs:{id:"不考虑事务的隔离性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不考虑事务的隔离性"}},[t._v("#")]),t._v(" 不考虑事务的隔离性")]),t._v(" "),a("p",[t._v("如果不考虑事务的隔离性，那么会发生下面所示的问题")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("脏读(Dirty Read)")])])]),t._v(" "),a("p",[t._v("所谓脏读是指"),a("strong",[t._v("一个事务中访问到了另外一个事务未提交的数据")])]),t._v(" "),a("p",[t._v("当一个事务读取另一个事务尚未提交的修改时，产生脏读")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("更新丢失(Lost Update)")])])]),t._v(" "),a("p",[t._v("当系统允许两个事务同时更新同一数据时，发生更新丢失")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("不可重复读(NonRepeatable Read)")])])]),t._v(" "),a("p",[t._v("同一查询在同一事务中多次进行，由于其他提交事务所做的修改或删除，每次返回不同的结果集，此时发生不可重复读")]),t._v(" "),a("p",[t._v("通俗解释是指"),a("strong",[t._v("在同一个事务内根据同一个条件对行记录(同一条数据)进行多次查询，但是搜出来的结果(数据)却不一致")]),t._v("，发生不可重复读的原因是在多次搜索期间查询条件覆盖的数据被其他事务修改了")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("幻读(Phantom Read)")])])]),t._v(" "),a("p",[t._v("同一查询在同一事务中多次进行，由于其他提交事务所做的插入操作，每次返回不同的结果集，此时发生幻像读")]),t._v(" "),a("p",[t._v("通俗解释是指"),a("strong",[t._v("同一个事务内多次查询返回的结果集不一样(比如增加了或者减少了行记录)")])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("幻读和不可重复读的区别")]),t._v("，幻读和不可重读读都是读取了另一个事务中已经提交的数据，不同的是不可重复读多次查询的都是同一个数据项，针对的是对同一行数据进行修改(Update)或删除(Delete)，而幻读针对的是一个数据整体(数据的条数)，主要是插入(Insert)操作"),a("br"),t._v(" "),a("strong",[t._v("比如")]),t._v("，同一个事务A内第一次查询时候有N条记录，但是第二次同等条件下查询却又N+1条记录，这就好像产生了幻觉，为啥两次结果不一样。其实和不可重复读一样，发生幻读的原因也是另外一个事务新增或者删除或者修改了第一个事务结果集里面的数据。不同在于不可重复读是同一个记录的数据内容被修改了，幻读是数据行记录变多了或者少了")])]),t._v(" "),a("h2",{attrs:{id:"read-uncommitted-未提交读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#read-uncommitted-未提交读"}},[t._v("#")]),t._v(" Read Uncommitted(未提交读)")]),t._v(" "),a("p",[t._v("读取未提交内容，在该隔离级别，"),a("strong",[t._v("所有事物都可以看到其它未提交事务的执行结果")]),t._v("，即在未提交读级别，事务中的修改，即使没有提交，对其他事务也都是可见的，该隔离级别很少用于实际应用。"),a("strong",[t._v("读取未提交的数据，也被称之为脏读(Dirty Read)")]),t._v("。该隔离级别最低，并发性能高")]),t._v(" "),a("h2",{attrs:{id:"read-committed-提交读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#read-committed-提交读"}},[t._v("#")]),t._v(" Read Committed(提交读)")]),t._v(" "),a("p",[t._v("读取提交内容，这是大多数数据库默认的隔离级别。它满足了隔离的简单定义，"),a("strong",[t._v("一个事务只能看见已经提交事务所做的改变")]),t._v("。换句话说，一个事务从开始到提交之前，所做的任何修改对其他事务都是不可见的")]),t._v(" "),a("h2",{attrs:{id:"repeatable-read-可重复读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#repeatable-read-可重复读"}},[t._v("#")]),t._v(" Repeatable Read(可重复读)")]),t._v(" "),a("p",[a("strong",[t._v("可重复读可以确保同一个事务，在多次读取同样数据的时候，得到同样的结果")]),t._v("。可重复读解决了脏读的问题，不过理论上，这会导致另外一个棘手的问题，幻读(Phantom Read)。MySQL中的InnoDB和Falcon存储引擎通过MVCC(Multi-Version Concurrency Control, 多版本并发控制)机制解决了该问题，需要注意的是，多版本控制只是解决了不可重复读的问题，而加上间隙锁(也就是它这里所谓的并发控制)才解决了幻读问题")]),t._v(" "),a("h2",{attrs:{id:"serializable-可串行化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#serializable-可串行化"}},[t._v("#")]),t._v(" Serializable(可串行化)")]),t._v(" "),a("p",[t._v("序列化，这是最高的隔离级别，它通过"),a("strong",[t._v("强制事务排序，强制事务串行执行")]),t._v("，从而解决幻读问题，简而言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的等待超时和锁竞争，实际应用中也很少用到这个隔离级别，只有在非常需要确保数据的一致性而且可以接受没有并发的情况下，才考虑使用这个隔离级别，这是花费代价最高但是最可靠的隔离级别")]),t._v(" "),a("h4",{attrs:{id:"最后"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最后"}},[t._v("#")]),t._v(" 最后")]),t._v(" "),a("ol",[a("li",[t._v("感谢lhrbest的事务的4种隔离级别(Isolation Level)分别是什么: "),a("a",{attrs:{href:"http://blog.itpub.net/26736162/viewspace-2638951",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://blog.itpub.net/26736162/viewspace-2638951"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("感谢Jade_K的事务隔离级别(IsolationLevel): "),a("a",{attrs:{href:"https://www.cnblogs.com/wms01/p/6183241.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.cnblogs.com/wms01/p/6183241.html"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("感谢阿里加多的何为脏读、不可重复读、幻读: "),a("a",{attrs:{href:"https://www.jianshu.com/p/f7ac1b22e899",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.jianshu.com/p/f7ac1b22e899"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=n.exports}}]);