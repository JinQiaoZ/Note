(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{476:function(e,t,a){"use strict";a.r(t);var s=a(11),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"浅析分布式锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浅析分布式锁"}},[e._v("#")]),e._v(" 浅析分布式锁")]),e._v(" "),a("p",[e._v("由于使用 Java 提供的 Synchronized 或者 ReentrantLock 只能锁住当前机器的线程，所以引出了分布式锁的概念")]),e._v(" "),a("h2",{attrs:{id:"_1-实现方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-实现方式"}},[e._v("#")]),e._v(" 1. 实现方式")]),e._v(" "),a("ul",[a("li",[e._v("数据库: 集群情况下数据一致性不强，而且还性能低下，暂不考虑")]),e._v(" "),a("li",[e._v("Memcached：利用 Memcached 的 add 命令。此命令是原子性操作，只有在 key 不存在的情况下，才能 add 成功，也就意味着线程得到了锁")]),e._v(" "),a("li",[e._v("Redis: 和 Memcached 的方式类似，利用 Redis 的 setnx 命令。此命令同样是原子性操作，只有在 key 不存在的情况下，才能 set 成功")]),e._v(" "),a("li",[e._v("Zookeeper: 利用 Zookeeper 的顺序临时节点，来实现分布式锁和等待队列。Zookeeper 设计的初衷，就是为了实现分布式锁服务的")]),e._v(" "),a("li",[e._v("Chubby：Google 公司实现的粗粒度分布式锁服务，底层利用了 Paxos 一致性算法")])]),e._v(" "),a("p",[e._v("常用的一般是 Redis 和 Zookeeper，这里说明下这两种的实现方式")]),e._v(" "),a("h2",{attrs:{id:"_2-redis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-redis"}},[e._v("#")]),e._v(" 2. Redis")]),e._v(" "),a("p",[e._v("原生实现和 Redisson 框架")]),e._v(" "),a("h3",{attrs:{id:"_2-1-原生实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-原生实现"}},[e._v("#")]),e._v(" 2.1. 原生实现")]),e._v(" "),a("p",[e._v("需要使用 setnx 命令，key 是锁的唯一标识，按业务来决定命名，还得设置过期时间防止死锁，但是 setnx 指令本身是不支持传入超时时间的，而 setnx 和 expire 两个操作合并是非原子性的，怎么解决呢")]),e._v(" "),a("ul",[a("li",[e._v("可以使用 lua 脚本，两个命令组合在一起就是原子的")]),e._v(" "),a("li",[e._v("新版本 set 指令增加了可选参数：set(key, value, 30, NX)")])]),e._v(" "),a("p",[e._v("业务执行完成的时候，del 导致误删其他线程的锁，value 需要设置为当前线程的唯一值，del 的时候判断是不是当前线程的锁，是的话才进行删除，这样又是两个操作组合不是原子性了，怎么解决呢，这里只能依赖 lua 脚本解决")]),e._v(" "),a("div",{staticClass:"language-lua extra-class"},[a("pre",{pre:!0,attrs:{class:"language-lua"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("-- 获取锁")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("-- NX是指如果key不存在就成功，key存在返回false，PX可以指定过期时间")]),e._v("\nSET anyLock unique_value NX PX "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("30000")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("-- 释放锁：通过执行一段lua脚本")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("-- 释放锁涉及到两条指令，这两条指令不是原子性的")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("-- 需要用到 redis 的 lua 脚本支持特性，redis 执行 lua 脚本是原子性的")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" redis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"get"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" KEYS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v(" ARGV"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("then")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" redis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"del"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" KEYS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("else")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("end")]),e._v("\n")])])]),a("h2",{attrs:{id:"_3-zookeeper"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-zookeeper"}},[e._v("#")]),e._v(" 3. Zookeeper")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI4MTY5NTk4Ng==&mid=2247489062&idx=1&sn=e5e931c8f6a16ef18e34ca82f58aa9f2&source=41#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[e._v("ZooKeeper真不是最终一致性的，而是顺序一致性"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/42239873",target:"_blank",rel:"noopener noreferrer"}},[e._v("线性一致性：什么是线性一致性？"),a("OutboundLink")],1)])]),e._v(" "),a("p",[a("strong",[e._v("参考")])]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.cnblogs.com/eyesfree/p/13162863.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("分布式锁用 Redis 还是 Zookeeper？"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1476050",target:"_blank",rel:"noopener noreferrer"}},[e._v("分布式锁用Redis坚决不用Zookeeper？"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://www.jianshu.com/p/a1ebab8ce78a",target:"_blank",rel:"noopener noreferrer"}},[e._v("什么是分布式锁"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=n.exports}}]);