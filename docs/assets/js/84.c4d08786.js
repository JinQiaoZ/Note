(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{427:function(t,a,s){"use strict";s.r(a);var _=s(11),r=Object(_.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"java拾遗-集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java拾遗-集合"}},[t._v("#")]),t._v(" Java拾遗-集合")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/wliduo/CDN@master/2020/04/20200429001.png",alt:"图片"}})]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("JDK 版本为 1.8")])])]),t._v(" "),s("h2",{attrs:{id:"_1-简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-简介"}},[t._v("#")]),t._v(" 1. 简介")]),t._v(" "),s("p",[t._v("在 Java 中，如果有一个类专门用来存放其它类的对象，这个类就叫做容器，或者就叫做集合，集合就是将若干性质相同或相近的类对象组合在一起而形成的一个整体")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("数组的容量是有限制的，而集合没有这样的限制，它的容量是可以自动调节的")])])]),t._v(" "),s("p",[t._v("Java 中的集合层次结构分为 "),s("strong",[t._v("单列集合(Collection)")]),t._v(" 和 "),s("strong",[t._v("双列集合(Map)")]),t._v("。单列和双列的直接理解就是，集合的每个项能存储多少个数据。Collection 以及它的子类在每个项中能存储一个数据，因此是单列集合。Map 以及它的子类一次性能存储两个数据，键和值，因此是双列集合")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("总结")]),t._v(" "),s("ul",[s("li",[t._v("List，Set，Queue，Map 都是接口，前三个继承至 Collection 接口，Map 为独立接口")])])]),t._v(" "),s("h2",{attrs:{id:"_2-list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-list"}},[t._v("#")]),t._v(" 2. List")]),t._v(" "),s("p",[t._v("List 下有 ArrayList，LinkedList，Vector")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("ArrayList")])])]),t._v(" "),s("p",[t._v("ArrayList 是线程不安全的，效率高，使用率高，"),s("strong",[t._v("因为底层是 Object数组，所以查询速度快，修改，删除，插入速度很慢")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("LinkedList")])])]),t._v(" "),s("p",[t._v("LinkedList 也是线程不安全的，效率高，"),s("strong",[t._v("因为底层是双向链表( JDK1.6 之前为循环链表，JDK1.7 取消了循环)，查询速度慢，修改，删除，插入速度很快")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Vector")])])]),t._v(" "),s("p",[t._v("Vector 是线程安全的(方法基本都经过 synchronized 修饰)，效率低，"),s("strong",[t._v("底层是 Object数组，使用率低，如果要线程安全可以使用 JUC 下的 CopyOnWriteArrayList")])]),t._v(" "),s("h2",{attrs:{id:"_3-set"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-set"}},[t._v("#")]),t._v(" 3. Set")]),t._v(" "),s("p",[t._v("Set 下有 HashSet，LinkedHashSet，TreeSet")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("HashSet")])])]),t._v(" "),s("p",[t._v("底层数据结构是哈希表(无序，唯一)，依赖两个方法 hashCode() 和 equals() 来保证元素唯一性")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("LinkedHashSet")])])]),t._v(" "),s("p",[t._v("HashSet 的有序扩展，底层数据结构是链表和哈希表(FIFO 插入有序，唯一)，"),s("strong",[t._v("由链表保证元素有序，由哈希表保证元素唯一")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("TreeSet")])])]),t._v(" "),s("p",[t._v("底层数据结构是红黑树(唯一，有序)")]),t._v(" "),s("ol",[s("li",[t._v("如何保证元素排序的呢?")])]),t._v(" "),s("p",[t._v("自然排序，比较器排序")]),t._v(" "),s("p",[t._v("2.如何保证元素唯一性的呢?")]),t._v(" "),s("p",[t._v("根据比较的返回值是否是0来决定")]),t._v(" "),s("h2",{attrs:{id:"_3-queue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-queue"}},[t._v("#")]),t._v(" 3. Queue")]),t._v(" "),s("p",[t._v("Queue 下有 ArrayDeque，PriorityQueue，而且 LinkedList 也实现了 Queue 接口")]),t._v(" "),s("p",[t._v("待补充")]),t._v(" "),s("h2",{attrs:{id:"_4-map"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-map"}},[t._v("#")]),t._v(" 4. Map")]),t._v(" "),s("p",[t._v("Map 下有 Hashtable，HashMap，LinkedHashMap，TreeMap")]),t._v(" "),s("ul",[s("li",[t._v("Hashtable")])]),t._v(" "),s("p",[t._v("HashTable 是线程安全的(方法基本都经过 synchronized 修饰)，效率低，"),s("strong",[t._v("使用率低，如果要线程安全可以使用 JUC 下的 ConcurrentHashMap")])]),t._v(" "),s("ul",[s("li",[t._v("HashMap")])]),t._v(" "),s("p",[t._v("HashMap 是线程不安全的，效率较高，"),s("strong",[t._v("如果要线程安全可以使用 JUC 下的 ConcurrentHashMap")])]),t._v(" "),s("ul",[s("li",[t._v("LinkedHashMap")])]),t._v(" "),s("p",[t._v("待补充")]),t._v(" "),s("ul",[s("li",[t._v("TreeMap")])]),t._v(" "),s("p",[t._v("待补充")]),t._v(" "),s("h2",{attrs:{id:"_5-底层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-底层"}},[t._v("#")]),t._v(" 5. 底层")]),t._v(" "),s("p",[t._v("主要是常用的几个容器了解清楚")]),t._v(" "),s("h3",{attrs:{id:"_5-1-hashmap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-hashmap"}},[t._v("#")]),t._v(" 5.1. HashMap")]),t._v(" "),s("p",[t._v("待补充")]),t._v(" "),s("h3",{attrs:{id:"_5-2-concurrenthashmap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-concurrenthashmap"}},[t._v("#")]),t._v(" 5.2. ConcurrentHashMap")]),t._v(" "),s("p",[t._v("待补充")]),t._v(" "),s("h3",{attrs:{id:"_5-3-arraylist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-arraylist"}},[t._v("#")]),t._v(" 5.3. ArrayList")]),t._v(" "),s("p",[t._v("待补充")]),t._v(" "),s("h3",{attrs:{id:"_5-4-linkedlist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-linkedlist"}},[t._v("#")]),t._v(" 5.4. LinkedList")]),t._v(" "),s("p",[t._v("待补充")]),t._v(" "),s("h3",{attrs:{id:"_5-5-copyonwritearraylist"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-copyonwritearraylist"}},[t._v("#")]),t._v(" 5.5. CopyOnWriteArrayList")]),t._v(" "),s("p",[t._v("待补充")]),t._v(" "),s("p",[s("strong",[t._v("参考")])]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://blog.csdn.net/zhangqunshuai/article/details/80660974",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java集合中List,Set以及Map等集合体系详解(史上最全)"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);